====Collection====
#객체관리

----List Interface----
#List:객체모음

##ArrayList
#ArrayList:크기
#ArrayList:인덱스
#ArrayList:중복저장
#ArrayList:제네릭
#ArrayList:선언
#add(객체)
#add(인덱스, 객체)
#get(인덱스)
#size()
#set(인덱스, 수정 객체)
#remove(인덱스)
#remove(객체)
#List 반복문 처리
#contains(객체)
#indexOf(객체)
#clear(List)
#isEmpty(List)
#Collections.XXX:부가기능
#Collections.addAll(List , )
#Collections.frequency(List , )
#Collections.max(List)
#Collections.min(List)
#Collections.sort(List)
#Collections.sort(List, Collections.reverseOrder())
#Collections.reverse(List)
#Collections.swap(List, i, j)
#Collections.fill(List, 객체)
#향상 for문:리스트 에러
#iterable
#Map-List 변환
#List<Score> scoreList = new ArrayList<Score>(Map.values());

##LinkedList
#삭제:good
#탐색:bad
#addFirst()
#addLast()
#getFirst()
#getLast()
#Queue 구현
#LIFO
#push(List)
#pop()
#peek()
#FIFO
#offer(객체)
#poll()
#peek()

-------Set-------
#중복저장X
##HashSet
#인덱스X
#순서X
#iterator
#Hash
#add(객체)
#size()
#next()
#hasNext()
#for each문:iterator
#remove(객체)
#new ArrayList<>(set)
#new HashSet<>(list)
#hashCode vs 주소값

#Stack
#Queue


=======Map=======

#Collections.sort(myList)

----------Map---------
@package etc.api.collection.map

#자료구조:Key - Value
#HashMap:클래스
#멀티 제네릭
#key:고유값
#LinkedHashMap:클래스
#put(key, value)
#containsKey(key)
#get(key)
#size()
#keySet()
#remove(key)
#clear()
#values()

-----Generic-----
@package etc.generic.bad
#Generic 클래스
#<T>
#<E>
#타입: 외부 지정
#객체타입


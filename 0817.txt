d//branch
동일한 소스코드에 대한 영역분할/ 병렬개발 = 동시다발적/효율적인 버전관리.
main, master branch = 주 버전

HEAD는 ?

git branch 이름: git branch 생성
git branch : branch 확인, *: 현재 위치
git branch -m new_branch_name: branch 이름 변경

git switch 이름 : git branch 이동

branch 하기 전에 기점으로 이동해있어ㅑㅇ 함.

git log --oneline --all --graph: 모든 브랜치를 그래프로 보여줘

git switch -c 이름: 생성과 동시에 이동한다.

git kraken에서 √표시가 HEAD를 의미한다.

git commit -a -m
git commit -am "": Modified file(!= new file)을 add없이 commit한다.

git checkout 브랜치명: branch를 전환한다. (옛날문법)

git branch -d branch명: commit내역이 없는/ main에 이미 병합된 branch를 삭제한다.
git branch -D branch명: commit내역이 있는/ main에 병합되지 않은 branch를 강제로 삭제한다.
(단, 원격 브랜치 삭제는 팀원간 소통 등의 주의가 필요하다.)

git branch -m new_branch명: 브랜치 이름을 변경한다.

//수정된 파일(변경사항)을 마무리지어야, commit안하면 branch 전환이 안된다. 그 작업영역에서 마무리하고 전환해야 한다.

 stash: 임시저장, 잠시 뒤로 미루고 이동하고 싶을 때 사용한다.

//branch는 합치고 나서 적당히 삭제해주는 관리가 중요하다.

//항상 main 브랜치에서 작업하지 않는 것이 좋다. 건들지 않고 다른 브랜치를 만들어 따로작업하는 것이 좋다.

// branch merge 
fast-forward = 빨리감기(ff) : main으 ㅣ변화가 없을때, 땡기기.
3-way merge (삼거리 병합): 파일 상충시, 충돌(CONFLICT)발생ㄴ
수동으로 수정해야 된다.ㅇㅇ
conflict 해결시, 새로운 커밋이 필요하다.

//vs code로 수월하게 병합/충돌을 해결할 수 있다.


//merge 시 기점으로 이동해야 된다.

git merge 브랜치명: 병합한다.

git switch -c trot emptylist: emptylist에서 파생되는 trot을 만들면서 이동한다.

git branch -d trot animation: trot와 animation 브랜치를 동시에 삭제한다.


//GUI : 유저인터페이스를 제공하는 것들.
CLI: 명령을 입력하는 환경.


// git diff: 소스코드, 파일의 변경사항 비교/시각적 표시

git diff: unstage에 있는 변경사항을 최근 Commit과 비교한다.
a/color.txt : Lastest Committed file
b/color.txt : working directory file

git diff HEAD: staging area 에서조차?도 확인한다.
내가 현재 마주하고 있는 이 내용과 마지막 커밋과의 차이를 보여줘라
(staging area에 ADD가 되지 않으면 추적할 수 없다.)

commit을 하지 않고 브랜치를 옮기면 그대로 따라와서 큰일나~


git diff master...location : branch 간 차이를 확인한다.


git diff 선commit_number...후commit_number : commit간 비교를 한다.


//git stash : 임시작업저장소; 작업간 전환에 유리하다.



// en, ko 몸이 불편하신 분을 위한 음성출력 언어?

// lorem ipsum : dummy text 생성 사이트; 말이 안되는 문장들이다.
// 한글 입숨 : 한글판 lorem ipsum

abort 중단되다


충돌하면 switching이 안됨.

stash 고유번호

git stash pop : 가장 마지막에 넣은 stash 튀어나와 . stash list에서 빠져나온다.
vs
선입선출은 눕혀있는 통구조.

git stash : 임시이름으로 저장한다.

git stash save name: 이름지어 저장한다.

git stash save "message": stash 명을 붙이며 저장한다.

git stash list: stack된 stash list불러온다.


git stash apply stash@{n}:n번째 stash를 꺼낸다. list에선 유지됨.?
꺼냈으면 다시 임시저장하든지 커밋하든지

git restore main.css

// javascript 배열
array.splice(4,3, 10, 11): [0,1,2,3,4,5,6,7,8]->[0,1,2,3,10,11,7,8]
4

let, const, var: 변수선언 
var: 중복선언, 영역탈출 가능, 선언 위치가 무관. =>혼란(오직 함수에서만 변수의 생명주기가 유효함.)

const = 상수; 변하지 않을 값에 사용한다. 함수에도 사용한다.
const obj ={ }; obj(객체)의 주소값만 변경되지 않으면 사용가능하다.
그 주소안에 있는 속성값은 변경이 가능하다.

vscode를 통해 conflict를 쉽게 해결할 수있다.


git stash drop: multiple-stash에서 특정 stash를 제거한다.

git stash clear: 모든 stash list를 삭제한다.

git stash는 어느 브랜치에서 하든 임시공간에 저장되어서 상관없다.

commit된 적이 없는 파일은 add과정이 필수다.( -am을 할 수 없다.)
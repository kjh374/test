shift insert: 붙여넣기(Linux)

pwd: print working directory; 현재위치를 알려준다. 

mkdir 폴더 생성
touch 파일 생성( 어떤 확장자라도 가능하다.)

rm -rf : 폴더 삭제
rm : 파일삭제

start . :  현재 폴더 실행한다.
start ..: 상위 폴더를 실행한다.
start 파일명 : 해당 파일을 실행한다. (= notepad 파일명; 단 더이상 입력이 안되네?)

*폴더 이동

절대경로: 풀경로
상대경로
cd ..(/) : 상위 폴더 이동
cd 폴더명: 하위 해당 폴더 이동
cd ../..(/) : 상위 폴더의 상위 폴더로 이동한다.
cd ../폴더명 : 형제 폴더로 이동한다.
cd / : 최상위폴더 이동
cd ~ : Desktop(바탕화면) 상위폴더 이동
ls : 하위 목록 보여주기
ls -a: 숨겨진 목록까지 포함해서 하위목록을 보여준다.
ls -l : 권한까지 보여준다.

start . : 현재폴더 열기(open . : 맥)

M  tab(한 두번) : 스펠링 목록, 자동완성

*Git

-Working directory: 작업하는 공간 자체. 폴더자체. 만든다고 관리하는 게 아님. 
-Staging area:  git add를 하면 들어가는 임시 공간. 대기공간. 스테이지.
수정되면 자동으로 워킹디렉토리도 이동함. 수정할 필요가 없는 확정이 된 애들을 한번에 밀어넣기 위한 공간이다.
-(Git local) repository: commit 을 통해 Git으로 관리되는 공간.


git init : 현재 폴더를 git으로 관리하는 .git 숨김폴더를 생성/초기화한다.
(파일 내부에 git init하면 git관리가 꼬인다.)

rm -rf .git: .git 파일을 삭제한다.

(master 또는 main): 메인 브렌치, 스트림이다. 최근에는 인종차별 이슈로 인해 main으로 바꾸는 추세이다.

&& : 한줄에 모두 입력한다.

untracted : staging area에 추가(add)되지 않은 파일이다.

깃 레포지토리 생성, 초기화

-: option = 'char'
--: option = "string"

git commit -m " ": message를 "한줄로" 남기는 것. 무엇이 바뀌었는지ㅡ 누가 작성했는지 작성해주는 것이  좋다.
git config --global: 어느 깃저장소를 생성하든지 각각 지정하지 않아도 됨. 전역지정. 공용컴퓨터는 추천하지 않음. 
git config --global user.name "": 이름.
git config --global user.email "": git hub 호환을 위하여 git-hub 로그인 정보를 그대로 써주는 게 좋다.
git config --list: user.name , user.email 이 잘 들어갔는지 확인한다.
git log : 기록된 commit 내역을 확인한다. 

git status: 깃의 현재 진행 상태를 확인한다. 
// changes not staged for commit: add를 하지 않은 파일이다.

help : 도움말; 명령어 모음을 나타낸다.
git help : git 에 해당하는 명령어를 나타낸다.

git add . : unstaging file을 onstage한다.
(#ff00000 Text) : modified file을 감지한다.
git add 파일1 파일2 ... : 여러 파일을 생성한다.
git log 후에 q: git 스테이지에서 나간다.
git log 후에 enter : 내역을 더 나타낸다.
git log --oneline : 한줄로 나타낸다.
git log : 여러줄로 나타낸다.

//git kraken
open repo: 저장소를 연다. 

//atomic commit : 가능한 작은 단위로 분리하여 변경사항을 관리한다.

//커밋 메시지는 (권장사항)
1. 제목(summary)과 내용(description)을 분리한다.
단 제목은 생략가능하다.
2. 제목에는 마침표x, 명령문 사용. 현재시제로.
3. 무엇을 왜바꾸엇는지 본문에. 길 수 있으니까.

git commit: 여러줄을 입력할 수 잇다.

git commit --amend: (바로) 직전 커밋을 수정한다. (메시지, 추가 커밋) 삭제는 안되는듯.
이거 안쓰고 커밋메시지 변경할 수는 없을까?


//gitignore: 공유되어서는 안되는 개인정보, 용량이 큰 파일, 특정 개발환경의 설정파일들을 git 버전 관리에서 제외한다.

touch .gitignore : git 버전 관리에서 제외한다.(= untracted에 나타나지 않는다. 단 add를 하면 안되므로 stage에서 빼야 한다. 

//gitinore
*.log: .log파일은 무시함.
!(파일).log 
파이썬에서는 not이라고함.

git restore --staged 파일명 : stage area에서 제외한다. 안되는데????))
git reset (파일명): git 을 unstage 한다.

*.properties :  github에 추가하지않는다. 제외한다.

metadata/* : metadata안에 모든 파일을 제외한다.
(metadata=설정파일이 들어가는 폴더.)

// git ignore.io 사이트에서 기본베이스는 생성할 수 있다.

******exercise2 : 숙제********

Terminal: 사용자에게 명령문(텍스트)을 입력받아서 쉘에게 전달한다.
Shall: Terminal을 통해 입력된 사용자의 명령을 해석하고 처리한 결과를 출력한다.

git init하기 전에 git status로 확인.




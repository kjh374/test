===Java===

	자동 들여쓰기: Ctrl + A && Ctrl + I
	tab: 따옴표, 괄호 밖으로

타입 변환은 누락 각오!
문법적 에러가 없으면 빨간줄이 안나지만, 런타임 익셉션(돌려봤더니 문제) 에러가 발생할 수 있음.

---Info---
	기본데이터 타입 개수: 8개 
	단순 줄 개행: system.out.prinln();
	소수점 자리수 조절: %.Nf
	스캐너 객체 생성:
		scanner + ctrl + Space + Enter 
		Scanner sc = new Scanner(System.in);
					"표준입력함수"
	-표준 출력 장치  
		개행 미포함: print
		개행 포함: println(=printf("\n");)
			
		형식 지정 표준 출력 장치(줄개행x): printf
			포맷팅 서식 문자 종류
				부호가 있는 정수 데이터: %d	
				실수 데이터: %f (소수점 자리수 조절: %.nf)
				문자열 데이터: %s
						/n
						/t
	-표준 입력 명령: (표준 입력 함수x)
		System.in
	-입력값 받기:
		sc.next();
	
---제어문---
	블록 내 코드가 한줄이라면 괄호 생략이 가능하다. ex) if() break; (단, 한줄이어도 코드가 길면 괄호 있는 게 가독성이 좋다.)

	-조건문(=분기문):
		if문:
			if 중첩 (=nesting)
			else 지정없으면 없는 것.
		switch문:
			switch(기준이 될 변수/변수의 연산식) 
			case 값(기준이 되는 자료형과 일치)
			주르륵 흘러내린다. >> break(해당 케이스문 실행 후 탈출); 이 특성을 이용해 CASE중첩도 가능하다.
			가로에도 쓸 수 있다.
			default: case설정하지 않은 값 (실행 후 알아서 종료 > >break 설정 필요x)



	-반복문:
		while문:
			자유롭게 커스텀하기 좋음.
			begin: 제어변수: 반복문의 횟수를 제어하는 변수 
			End: 논리형 조건식: 반복문의 끝을 지정 (true면 실행; false면 탈출)
			Step: 증감식: 반복문의 종료를 위해 제어변수의 값을 조정 (+= n 가능)
			상기한 3가지는 먼저 작성하고 하는 게 정신건강에 이로움.
			나누어 떨어진다: 나머지 == 0
			무엇들을 반복할지가 핵심
			소수: 약수가 2개
			증감식 의도적 삭제 가능.
		for문:
			반복횟수(범위)가 명확할 때 주로 사용함.
			보기 편하고 깔끔함.
		Loop nesting:
			내부 반복문의 변수 업데이트가 필요할 때에는 외부 반복문 안에 넣음.
		무한루프: while(true)>>>>>>>>>>>>>>>>>>>>>>>> for(;;)	
			begin, end, step 이 없다.
			반드시 break; 가 포함되어 있어야 된다.
			
	-탈출문:
		원하는 반복문 탈출: label: for // break label; continue label;

		강제종료:
			반복문 탈출: break; 거의 if(조건문)와 SET
			무한루프 탈출: 
			메서드 반환/종료: return;
		강제생략:
			조건에 해당하는 반복 회차 생략: continue;
				생략 후 while문에서는 [조건식]으로/ for문은 [증감식]으로 간다.


	-배열:
		-동종모음: 같은 타입 데이터 모음
		-배열 변수 선언: type[] arr; 
			배열도 데이터타입이므로 데이터 타입에 같이 적는것이 좋다.
		-배열 객체 생성: arr = new type[n]; 
				배열크기 고정해야 된다. ;
				저장공간: 객체:Heap(변수공간은 작아서)//객체주소:Stack ; 
		-선언과 동시에 생성: type[] Arr = new type[n];
		-배열의 초기화: 값 저장; arr[n] = 값;
		-생성과 동시에 배열 기본값으로 자동 초기화된다.
		-생성과 동시에 초기화: new type[] { , , , } (신규 생성이라면 new type 생략 가능; 알아서 새로운 객체 생성되는듯.)
		
		-배열 내부 요소값 확인: arrays ctrl+space <util> .toString(아무거나)

		
		-반복문 활용:
			 향상 for문(for-each문):
				for( 배열 요소를 받아줄 수 있는 변수선언: 배열변수)
				(단, 처음부터 끝까지 무조건 반복, 중간부터 못돌림, 인덱스값 활용 불가)
		
		


	-연산자(Operator): 
		 string타입에선 연산이 불가능하다.
		-우선순위:
			괄호>.>단항>이항>삼항>대입>.....
		-형 변환 연산자: 
				연산을 하기 전에 형변환을 해야 값이 누락되지 않는다.
		-할당 연산자: 대입 연산자
			좌항: 영역 // 우항: 값
		-복합 대입 연산자: += -= *= /= %=; 대입 연산자에 산술 연산자에 결합되어 있는 형태.
		-3항 연산자: 피연산자가 3개인 연산자; (조건식 ? true일 때 출력값 : false일 때 출력값)
		-논리 연산자:
			단축 평가 연산(short cicuit operation): $, | ; 

		

			
	-로직:
		난수 발생: Math.random(); 0.0 이상 1.0 미만의 실수 난수값을 반환한다.
				곱할 값: 후수+1-선수;
				더할 값: 선수;
		소수 판별: 
		난수활용 연산자: 특정 조건 하에서 연산자 특정한다.	
